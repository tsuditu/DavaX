CREATE TABLE SRC_ATTENDANCE (
    id_attendance       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- identificator unic pentru fiecare prezenta
    nume_complet        VARCHAR2(100) NOT NULL,        -- numele complet al participantului
    email               VARCHAR2(100) NOT NULL,        -- emailul participantului (legatura cu SRC_ANGAJAT)
    durata_minute       VARCHAR2(50),                  -- durata totala a sesiunii (ex: '1h39m54s', format text)
    durata_participare  VARCHAR2(10),                  -- durata reala a participarii (tot in format text)
    ora_intrare         VARCHAR2(30),                  -- ora de inceput (text: ex. '1:32 PM')
    ora_iesire          VARCHAR2(30),                  -- ora de sfarsit (text)
    titlu_meeting       VARCHAR2(100),                 -- titlul sesiunii/meetingului
    id_angajat          NUMBER,                        -- id-ul angajatului (legat ulterior prin UPDATE)
    loading_timestamp   TIMESTAMP,                     -- metadate: cand a fost importata inregistrarea
    dataset_nume        VARCHAR2(50)                   -- metadate: ce set de date contine inregistrarea
);


-- Trigger care completeaza automat loading_timestamp si dataset_nume
CREATE OR REPLACE TRIGGER trg_set_metadata_attendance
BEFORE INSERT ON SRC_ATTENDANCE
FOR EACH ROW
BEGIN
  :NEW.loading_timestamp := SYSTIMESTAMP;
  :NEW.dataset_nume := 'attendance_' || TO_CHAR(SYSTIMESTAMP, 'DD-MM-YY');
END;
/


-- Actualizeaza coloana id_angajat in SRC_ATTENDANCE
-- pe baza coresponderii dintre emailurile din attendance si angajati
UPDATE SRC_ATTENDANCE att
SET id_angajat = (
  SELECT a.id_angajat
  FROM SRC_ANGAJAT a
  WHERE LOWER(a.email) = LOWER(att.email)
)
WHERE att.id_angajat IS NULL;


COMMIT;
